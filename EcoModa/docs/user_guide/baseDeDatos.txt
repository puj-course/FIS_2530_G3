# Opción 1 — Base de datos NoSQL (MongoDB)

1. Justificación

Flexibilidad de esquema: las fichas de prendas pueden variar (talla, materiales, estado, tags, fotos). No requiere migraciones al cambiar atributos.
 Velocidad de iteración (MVP): permite lanzar y ajustar el producto rápido.
 Búsqueda y filtros ricos: texto, etiquetas, rangos de precio, y ubicación (geo-queries) para conectar personas por cercanía.
 Escalabilidad horizontal: adecuada para catálogos grandes y alto tráfico de lectura.

 2. Alcance de datos

 Catálogo y publicaciones (prendas, fotos, tags, ubicación).
 Usuarios y perfiles (roles comprador/vendedor/admin).
 Transacciones livianas (órdenes iniciales del MVP).
 Donaciones y recompensas (registro y trazabilidad básica).
 Mensajería entre usuarios (soporte a negociación/trueque).
 Reputación y reviews (confianza en la comunidad).
 Auditoría de eventos (seguridad y cambios críticos).

 3. Modelo de colecciones (sin código)

3.1 `users`

Propósito: perfiles, autenticación y reputación.

 Campos clave: \_id, nombre, apellido, username, email (único), teléfono, rol (comprador|vendedor|admin), ciudad/pais, ubicación {lat,lng}, estado (activo|suspendido), fechaRegistro, preferencias (tallas, estilos, notificaciones), reputación {ratingPromedio, totalReviews}.
 Relaciones: vendedor en `items`; comprador en `orders`; emisor/receptor en `messages`; autor/objeto en `reviews`.
 Cardinalidad: 1 usuario ↔ N items, N orders, N reviews.

 3.2 `items`

Propósito: catálogo de prendas/publicaciones.

 Campos clave: \_id, sellerId(→users), título, descripción, categoría, talla, género (opc.), medidas (opc.), estadoPrenda (nuevo|comoNuevo|usado|vintage), materiales, precio, moneda, stock (usualmente 1), fotos\[], videoUrl (opc.), tags\[], ubicación {ciudad, geoPoint}, estadoPublicación (activa|pausada|vendida), createdAt.
 Relaciones: referencia a `users` (sellerId); aparece en `orders` y `donations`.
 Cardinalidad: 1 vendedor ↔ N publicaciones; 1 item ↔ 0..N órdenes (histórico).

 3.3 `orders`

Propósito: compras/trueques del MVP.

 Campos clave: \_id, buyerId(→users), items\[{itemId, qty, price, sellerId}], total, moneda, estado (pagado|enviado|entregado|cancelado|devuelto), direcciónEnvio {texto, ciudad, geoPoint}, pago {proveedor, status, referencia}, timeline\[{evento, fecha, actorId}], createdAt.
 Relaciones: buyerId (comprador), items\[].sellerId (vendedores), referencia a `items`.
 Cardinalidad: 1 comprador ↔ N órdenes; 1 orden ↔ N items.

 3.4 `donations`

Propósito: registro de donaciones y comprobantes.

 Campos clave: \_id, donorId(→users), receptor {tipo (fundación|usuario), id}, items\[{itemId}], comprobanteUrl, notas, createdAt.
 Relaciones: donorId y receptor.id (→users u orgs); items (→items).
 Cardinalidad: 1 donante ↔ N donaciones.
 3.5 `rewards`

Propósito: puntos y recompensas por acciones (donar, vender responsable, retos ODS).

 Campos clave: \_id, userId(→users), puntos (+/-), motivo (pedido|donación|reto), referencia {tipo, id}, saldoAcumulado, createdAt.
 Relaciones: userId (→users), referencia a entidades.
 Cardinalidad: 1 usuario ↔ N movimientos de puntos.

3.6 `messages`

Propósito: chat privado para negociar/coordinar.

 Campos clave: \_id, convoId, from(→users), to(→users), contenido, adjuntos\[], createdAt, leído (bool).
 Relaciones: usuarios involucrados; opcionalmente `items` (contexto).
 Cardinalidad: 1 conversación ↔ N mensajes.
 3.7 `reviews`

Propósito: reputación y confianza.

 Campos clave: \_id, orderId(→orders), reviewerId(→users), reviewedUserId(→users), rating (1–5), comentario, createdAt.
 Relaciones: vincula orden y usuarios (quién califica a quién).
 Cardinalidad: 1 orden ↔ 0..2 reviews (para cada contraparte).

 3.8 `events_audit`

Propósito: trazabilidad y seguridad (event-sourcing ligero).

 Campos clave: \_id, actorId(→users), type (CREATE|UPDATE|DELETE|WEBHOOK), entity (users|items|orders|donations|rewards), entityId, payload (cambios), createdAt, ip.
 Relaciones: referencia genérica a entidades.
 Cardinalidad: N eventos por entidad.

> Nota: Para organizaciones receptoras (fundaciones), puedes incluirlas en `users` con rol `org` o crear colección `organizations` si necesitas atributos específicos.

 4. Reglas de negocio (clave)

 Publicación: sólo `items.estadoPublicación=activa` son visibles; cambio a `vendida` al cerrar una orden.
 Stock único: si `stock=1`, al reservar/ordenar se bloquea el item (estado `pausada` o flag `reservado`).
 Donaciones & recompensas: cada donación genera un movimiento en `rewards`; puntos canjeables por descuentos o badges.
 Mensajería segura: sólo entre comprador y vendedor de un item, o entre donante y receptor de donación.
 Reviews: sólo usuarios que participaron en una orden pueden calificar; una review por usuario/orden/rol.

 5. Índices recomendados (conceptuales)

 Búsqueda catálogo: categoría, talla, precio, createdAt; índice de texto en título+descripción+tags.
 Geolocalización: índice 2dsphere en `items.ubicacion.geoPoint` para “cerca de mí”.
 Relacionales: items.sellerId; orders.buyerId y orders.items.sellerId; reviews.reviewedUserId.
 Auditoría: events\_audit.entity+entityId (para reconstruir historial rápido..

 6. Validación y consistencia

 Validación de esquema (JSON Schema/validators) para asegurar campos mínimos (ej. título, precio, estadoPrenda).
 Trnsacciones puntuales (multi-documento) para casos críticos: confirmación de orden + cambio de estado de item + registro de rewards.
 Idempotencia de webhooks (pagos): registrar `eventId` en `events_audit` para evitar duplicados.

 7. Flujo de datos (resumen)

1. Publicar prenda: `users` crea `items` (activa).
2. Descubrimiento: filtros por categoría/talla/precio, búsqueda por texto y/o cercanía.
3. Compra/trueque: se crea `orders`; item se marca reservado/vendido; se notifica por `messages`.
4. Entrega y review: al confirmar, se habilita `reviews` y se registran `rewards`.
5. Donación: `donations` + comprobante; genera movimiento en `rewards`.
6. Auditoría: cada acción relevante crea un `events_audit`.

 8. Seguridad y cumplimiento

 Autenticación: contraseñas con hash robusto; sesiones cortas; 2FA opcional.
 Autorización: políticas por rol (admin, vendedor, comprador, org).
 PII: datos sensibles minimizados; cifrado en reposo del proveedor; control de acceso a backups.
 Moderación: flag en `items` y `users.status`; registro en `events_audit`.

 9. Operación, copias y crecimiento

 Backups automáticos diarios con retención (7/14/30 días).
 Entornos: dev / staging / prod separados.
 Observabilidad: métricas (errores, latencias, tamaño de colecciones), alertas por crecimiento anómalo.
 Escalado: sharding por ubicación (ciudad/país) o por vendedor si el catálogo crece mucho.
 Data warehouse (futuro): exportar a BigQuery/ClickHouse para analítica ODS y reporting avanzado.

---

